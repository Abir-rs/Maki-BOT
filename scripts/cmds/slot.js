module.exports = {
  config: {
    name: "slot",
    version: "1.0",
    author: "OtinXSandip",
    shortDescription: {
      en: "Slot game",
    },
    longDescription: {
      en: "Slot game.",
    },
    category: "Game",
  },
  langs: {
    en: {
      invalid_amount: "Enter a valid and positive amount to have a chance to win double",
      not_enough_money: "Check your balance if you have that amount",
      spin_message: "Spinning...",
      win_message: "You won $%1, buddy!",
      lose_message: "You lost $%1, buddy.",
      jackpot_message: "Jackpot! You won $%1 with three %2 symbols, buddy!",
    },
  },
  onStart: async function ({ args, message, event, envCommands, usersData, commandName, getLang }) {
    const { senderID } = event;
    const userData = await usersData.get(senderID);
    const amount = parseInt(args[0]);

    if (isNaN(amount) || amount <= 0) {
      return message.reply(getLang("invalid_amount"));
    }

    if (amount > userData.money) {
      return message.reply(getLang("not_enough_money"));
    }

    // рж╕рзНрж▓ржЯ рж╕рж┐ржорзНржмрж▓рж╕
    const slots = ["ЁЯТЪ", "ЁЯТЫ", "ЁЯТЩ"];
    
    // рж╕рзНрж▓ржЯржЧрзБрж▓рзЛ рж░рзНржпрж╛ржирзНржбржо ржнрж╛ржмрзЗ ржирж┐рж░рзНржмрж╛ржЪржи
    const slot1 = slots[Math.floor(Math.random() * slots.length)];
    const slot2 = slots[Math.floor(Math.random() * slots.length)];
    const slot3 = slots[Math.floor(Math.random() * slots.length)];

    // ржкрзНрж░рж╛ржкрзНржд ржЬрзЗрждрж╛рж░ ржкрж░рж┐ржорж╛ржг
    const winnings = calculateWinnings(slot1, slot2, slot3, amount);

    // ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржирждрзБржи ржЕрж░рзНрже ржЖржкржбрзЗржЯ ржХрж░рж╛
    await usersData.set(senderID, {
      money: userData.money + winnings,
      data: userData.data,
    });

    // рж╕рзНржкрж┐ржи ржлрж▓рж╛ржлрж▓
    const messageText = getSpinResultMessage(slot1, slot2, slot3, winnings, getLang);

    return message.reply(messageText);
  },
};

function calculateWinnings(slot1, slot2, slot3, betAmount) {
  const randomOutcome = Math.random();

  // ржпржжрж┐ рж╣рж╛рж░рж╛ржирзЛрж░ рж╕ржорзНржнрж╛ржмржирж╛ (0-49%)
  if (randomOutcome < 0.5) {
    return -betAmount; // рж╣рж╛рж░рж╛ржирзЛ
  }

  // ржпржжрж┐ ржЬрзЗрждрж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ (50-100%)
  if (slot1 === slot2 && slot2 === slot3) {
    if (slot1 === "ЁЯТЪ") {
      return betAmount * 10; // ЁЯТЪ рж╕рзНрж▓ржЯ, рззрзж ржЧрзБржг
    } else if (slot1 === "ЁЯТЫ") {
      return betAmount * 5; // ЁЯТЫ рж╕рзНрж▓ржЯ, рзл ржЧрзБржг
    } else {
      return betAmount * 3; // ЁЯТЩ рж╕рзНрж▓ржЯ, рзй ржЧрзБржг
    }
  } else if (slot1 === slot2 || slot1 === slot3 || slot2 === slot3) {
    return betAmount * 2; // рзиржЯрж┐ рж╕рзНрж▓ржЯ ржПржХ рж░ржХржо рж╣рж▓рзЗ рзи ржЧрзБржг
  } else {
    return -betAmount; // рж╕рзНрж▓ржЯржЧрзБрж▓рзЛ ржЖрж▓рж╛ржжрж╛ рж╣рж▓рзЗ рж╣рж╛рж░рж╛ржирзЛ
  }
}

function getSpinResultMessage(slot1, slot2, slot3, winnings, getLang) {
  if (winnings > 0) {
    if (slot1 === "ЁЯТЩ" && slot2 === "ЁЯТЩ" && slot3 === "ЁЯТЩ") {
      return getLang("jackpot_message", winnings, "ЁЯТЩ");
    } else {
      return getLang("win_message", winnings) + `\[ ${slot1} | ${slot2} | ${slot3} ]`;
    }
  } else {
    return getLang("lose_message", -winnings) + `\[ ${slot1} | ${slot2} | ${slot3} ]`;
  }
}
